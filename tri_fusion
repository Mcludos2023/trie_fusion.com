#include <stdio.h>

// Combinaison de deux sous-tableaux triés
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Tableaux temporaires
    int L[n1], R[n2];

    // Copier les données dans les tableaux temporaires L[] et R[]
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    // Fusionner les tableaux temporaires en un tableau final
    i = 0; // Indice initial du premier sous-tableau
    j = 0; // Indice initial du second sous-tableau
    k = left; // Indice initial du tableau fusionné
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copier les éléments restants de L[], s'il y en a
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copier les éléments restants de R[], s'il y en a
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Fonction principale pour trier un tableau en utilisant le tri par fusion
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Trouver le point milieu
        int mid = left + (right - left) / 2;

        // Trier la moitié gauche du tableau
        mergeSort(arr, left, mid);

        // Trier la moitié droite du tableau
        mergeSort(arr, mid + 1, right);

        // Fusionner les deux moitiés triées
        merge(arr, left, mid, right);
    }
}

// Fonction utilitaire pour afficher un tableau donné
void printArray(int arr[], int size) {
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Exemple d'utilisation
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Tableau d'origine :\n");
    printArray(arr, n);

    mergeSort(arr, 0, n - 1);

    printf("Tableau trié :\n");
    printArray(arr, n);

    return 0;
}